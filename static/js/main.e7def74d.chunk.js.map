{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","message","author","className","id","this","href","role","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4OAsCeA,G,wDAlCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,4BACTC,OAAQ,uBAJE,E,qDAQZ,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,4CACb,wBAAIA,UAAU,eAAd,yBAEF,yBAAKC,GAAG,YAAYD,UAAU,uCAC5B,gCAAYA,UAAU,cACpB,wBAAIC,GAAG,OAAOD,UAAU,eAAeE,KAAKL,MAAMC,SACpD,wBAAIG,GAAG,SAASD,UAAU,qBAAqBE,KAAKL,MAAME,SAE1D,yBAAKC,UAAU,kCACb,6BACE,uBAAGG,KAAK,IAAIF,GAAG,cAAcD,UAAU,kBAAkBI,KAAK,UAAS,uBAAGJ,UAAU,4BAEtF,6BACE,4BAAQK,KAAK,SAASJ,GAAG,YAAYD,UAAU,mBAA/C,gBAIN,yBAAKA,UAAU,gBAAf,4B,GA5BUM,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,a","file":"static/js/main.e7def74d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      message: \"Here will be random quote\",\n      author: \"And here the author\"\n    }\n  }\n  render() {\n    return (\n      <div className=\"App container-fluid pt-3\">\n        <div className=\"bg-primary text-white border rounded-top\">\n          <h1 className=\"text-center\">Random Quote Machine</h1>\n        </div>\n        <div id=\"quote-box\" className=\"container-fluid rounded-bottom mt-3\">\n          <blockquote className=\"blockquote\">\n            <h2 id=\"text\" className=\"text-center\">{this.state.message}</h2>\n          <h3 id=\"author\" className=\"blockquote-footer\">{this.state.author}</h3>\n          </blockquote>\n          <div className=\"d-flex justify-content-between\">\n            <div>\n              <a href=\"#\" id=\"tweet-quote\" className=\"btn btn-primary\" role=\"button\"><i className=\"fab fa-twitter-square\"></i></a>\n            </div>\n            <div>\n              <button type=\"button\" id=\"new-quote\" className=\"btn btn-success\">New quote</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"fixed-bottom\">\n          Made by Dan Sprucek\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n// User Story #6: On first load, my quote machine displays a random quote in the element with id=\"text\".\n\n// User Story #7: On first load, my quote machine displays the random quote's author in the element with id=\"author\".\n\n// User Story #8: When the #new-quote button is clicked, my quote machine should fetch a new quote and display it in the #text element.\n\n// User Story #9: My quote machine should fetch the new quote's author when the #new-quote button is clicked and display it in the #author element.\n\n// User Story #10: I can tweet the current quote by clicking on the #tweet-quotea element. This a element should include the \"twitter.com/intent/tweet\" path in its href attribute to tweet the current quote.\n\n// User Story #11: The #quote-box wrapper element should be horizontally centered. Please run tests with browser's zoom level at 100% and page maximized.\n\n// You can build your project by forking this CodePen pen. Or you can use this CDN link to run the tests in any environment you like: https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}