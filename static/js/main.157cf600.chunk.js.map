{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","fetch","then","response","json","data","randomNumber","Math","floor","random","length","setState","message","author","copyToClipboard","copyQuote","state","textArea","document","createElement","value","style","top","left","position","getElementById","appendChild","focus","select","execCommand","remove","className","id","this","href","target","rel","role","type","onClick","height","backgroundColor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"4OAiFeA,G,wDA7Eb,aAAe,IAAD,8BACZ,gBAoBFC,YAAc,WAEZC,MADe,+BAEZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAKK,OAAS,IAC7D,EAAKC,SAAS,CACZC,QAASP,EAAKC,GAAL,KACTO,OAAQR,EAAKC,GAAL,aA7BF,EAkCdQ,gBAAkB,WAChB,IAAIC,EAAY,EAAKC,MAAMJ,QAAU,MAAQ,EAAKI,MAAMH,OACpDI,EAAWC,SAASC,cAAc,YACtCF,EAASG,MAAQL,EACjBE,EAASI,MAAMC,IAAM,IACrBL,EAASI,MAAME,KAAO,IACtBN,EAASI,MAAMG,SAAW,QAC1BN,SAASO,eAAe,aAAaC,YAAYT,GACjDA,EAASU,QACTV,EAASW,SACTV,SAASW,YAAY,QACrBZ,EAASa,UA3CT,EAAKd,MAAQ,CACXJ,QAAS,GACTC,OAAQ,IAJE,E,gEAQM,IAAD,OAEjBZ,MADe,+BAEZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAKK,OAAS,IAC7D,EAAKC,SAAS,CACZC,QAASP,EAAKC,GAAL,KACTO,OAAQR,EAAKC,GAAL,c,+BAiCd,OACE,yBAAKyB,UAAU,OACb,yBAAKA,UAAU,gEACb,wBAAIA,UAAU,eAAd,yBAEF,yBAAKC,GAAG,YAAYD,UAAU,gCAC5B,gCAAYA,UAAU,yBACpB,wBAAIC,GAAG,OAAOD,UAAU,cAAa,2BAAIE,KAAKjB,MAAMJ,UACtD,wBAAIoB,GAAG,SAASD,UAAU,qBAAqBE,KAAKjB,MAAMH,SAE1D,yBAAKkB,UAAU,kCACb,6BACE,uBAAGG,KAAI,gDAA2CD,KAAKjB,MAAMJ,SAAtD,OAAgEqB,KAAKjB,MAAMH,QAAUsB,OAAO,SAASC,IAAI,sBAAsBJ,GAAG,cAAcD,UAAU,uBAAuBM,KAAK,UAAS,uBAAGN,UAAU,2BACnN,4BAAQO,KAAK,SAASP,UAAU,uBAAuBQ,QAASN,KAAKnB,iBAArE,oBAEF,6BACE,4BAAQwB,KAAK,SAASN,GAAG,YAAYD,UAAU,kBAAkBQ,QAASN,KAAKjC,aAA/E,gBAIN,yBAAKqB,MAAO,CAACmB,OAAQ,GAAIC,gBAAiB,WAC1C,yBAAKpB,MAAO,CAACmB,OAAQ,GAAIC,gBAAiB,SAAUV,UAAU,8DAC5D,uBAAGA,UAAU,iCAAb,qE,GAxEQW,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASO,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9C,a","file":"static/js/main.157cf600.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      message: \"\",\n      author: \"\"\n    }\n  }\n\n  componentDidMount(){\n    const apiUrl = \"https://type.fit/api/quotes\";\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        let randomNumber = Math.floor(Math.random() * (data.length - 1))\n        this.setState({\n          message: data[randomNumber][\"text\"],\n          author: data[randomNumber][\"author\"]\n          })\n        })\n  }\n\n  handleClick = () => {\n    const apiUrl = \"https://type.fit/api/quotes\";\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        let randomNumber = Math.floor(Math.random() * (data.length - 1))\n        this.setState({\n          message: data[randomNumber][\"text\"],\n          author: data[randomNumber][\"author\"]\n          })\n        })\n      }\n\n  copyToClipboard = () => {\n    let copyQuote = this.state.message + \" - \" + this.state.author\n    let textArea = document.createElement(\"textarea\")\n    textArea.value = copyQuote\n    textArea.style.top = \"0\"\n    textArea.style.left = \"0\"\n    textArea.style.position = \"fixed\"\n    document.getElementById(\"quote-box\").appendChild(textArea)\n    textArea.focus()\n    textArea.select();\n    document.execCommand(\"copy\")\n    textArea.remove()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid p-2 bg-primary text-white border rounded-top\">\n          <h1 className=\"text-center\">Random Quote Machine</h1>\n        </div>\n        <div id=\"quote-box\" className=\"container mt-5 col-lg-7 mt-3\">\n          <blockquote className=\"blockquote text-right\">\n            <h2 id=\"text\" className=\"quote-text\"><q>{this.state.message}</q></h2>\n          <h3 id=\"author\" className=\"blockquote-footer\">{this.state.author}</h3>\n          </blockquote>\n          <div className=\"d-flex justify-content-between\">\n            <div>\n              <a href={`https://twitter.com/intent/tweet?text=${this.state.message}${this.state.author}`} target=\"_blank\" rel=\"noopener noreferrer\" id=\"tweet-quote\" className=\"btn btn-primary ml-1\" role=\"button\"><i className=\"fab fa-twitter-square\"></i></a>\n              <button type=\"button\" className=\"btn btn-primary ml-1\" onClick={this.copyToClipboard}>Copy this quote</button>\n            </div>\n            <div>\n              <button type=\"button\" id=\"new-quote\" className=\"btn btn-success\" onClick={this.handleClick}>New quote</button>\n            </div>\n          </div>\n        </div>\n        <div style={{height: 45, backgroundColor: \"white\"}}></div>\n        <div style={{height: 45, backgroundColor: \"white\"}} className=\"fixed-bottom d-flex justify-content-center align-items-end\">\n          <p className=\"text-center font-italic small\">Made by Dan Sprucek as a part of freeCodeCamp certification</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}